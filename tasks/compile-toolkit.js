/**
 * Concat toolkit modules and remove all require definitions
 */

"use strict";

var gutil = require("gulp-util");
var through = require("through2"),
	fs = require("fs"),
	requirejs = require("requirejs");

module.exports = function (data, options) {

	var contents;

	// requirejs config
	var config = {
		baseUrl: "src/toolkit/js",
		mainConfigFile: "src/toolkit/js/toolkit.js",
		name: "toolkit",
		optimize: "none",
		wrap: {
			startFile: "src/toolkit/js/build/intro.js",
			endFile: "src/toolkit/js/build/outro.js"
		}
	};


	/**
	 * Strip all definitions generated by requirejs
	 * @param {String} name
	 * @param {String} path
	 * @param {String} contents The contents to be written (including their AMD wrappers)
	 */
	config.onBuildWrite = function (name, path, contents) {

		var rdefineEnd = /\}\);[^}\w]*$/;

		// Remove define wrappers, closure ends, and empty declarations
		contents = contents
			.replace(/define\([^{]*?{/g, "")
			.replace(rdefineEnd, "");

		// Remove require wrappers
		contents = contents
			.replace(/require\([^{]*?{/g, "")
			.replace(rdefineEnd, "");

		// Remove require.config blocks
		contents = contents
			.replace(/require.config\([^{]*?{([^}]+)}\);/g, "");

		// Remove empty definitions
		contents = contents
			.replace(/define\([^{]*?{}\);/, "");

		// remove "toolkit" return statements
		contents = contents
			.replace(/\s*return\s+(toolkit)+;/, "");

		return contents;

	};

	// remove last define on save out
	config.out = function (text) {
		contents = text.replace(/define\([^{]*?{}\);/, "");
	};

	requirejs.optimize(config);

	return through.obj(function (file, enc, cb) {
		if (file.isNull()) {
			this.push(file);
			return cb();
		}

		try {
			file.contents = new Buffer(contents);
		} catch (err) {
			this.emit("error", new gutil.PluginError("compile toolkit js", err));
		}

		this.push(file);
		cb();
	});

};